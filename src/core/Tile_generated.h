// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TILE_TBSD_H_
#define FLATBUFFERS_GENERATED_TILE_TBSD_H_

#include "flatbuffers/flatbuffers.h"

namespace tbsd {

struct Tile;

enum class TileType : int8_t {
  Ground = 0,
  Wall = 1,
  MIN = Ground,
  MAX = Wall
};

inline const TileType (&EnumValuesTileType())[2] {
  static const TileType values[] = {
    TileType::Ground,
    TileType::Wall
  };
  return values;
}

inline const char * const *EnumNamesTileType() {
  static const char * const names[3] = {
    "Ground",
    "Wall",
    nullptr
  };
  return names;
}

inline const char *EnumNameTileType(TileType e) {
  if (flatbuffers::IsOutRange(e, TileType::Ground, TileType::Wall)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTileType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(1) Tile FLATBUFFERS_FINAL_CLASS {
 private:
  int8_t type_;

 public:
  Tile()
      : type_(0) {
  }
  Tile(tbsd::TileType _type)
      : type_(flatbuffers::EndianScalar(static_cast<int8_t>(_type))) {
  }
  tbsd::TileType type() const {
    return static_cast<tbsd::TileType>(flatbuffers::EndianScalar(type_));
  }
  void mutate_type(tbsd::TileType _type) {
    flatbuffers::WriteScalar(&type_, static_cast<int8_t>(_type));
  }
};
FLATBUFFERS_STRUCT_END(Tile, 1);

}  // namespace tbsd

#endif  // FLATBUFFERS_GENERATED_TILE_TBSD_H_
